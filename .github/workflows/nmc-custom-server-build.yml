###
# SPDX-License-Identifier: AGPL-3.0
#
# Author: Bernd rederlechner <bernd.rederlechner@t-systems.com
#
# Assemble a customisation for recent trunk
# (only master changes, no backports)
#
# The assembly ssafeguards that all customisations for master
# are available and merge properly.
#

name: MCLOUD custom server build

on:
  workflow_call:
    inputs:
      stable:
        description: The NExtcloud stable upstream branch of enterprise release
        required: true
        type: string
      assembly:
        description: name of the customisation branch holding the assembly
        required: true
        type: string
      tag:
        description: tag to use for the release (nmc<nc-version>-<custom-increment>)
        required: true
        type: string
      prerelease:
        description: mark the package as pre-release
        required: false
        type: string        

env:
  CUSTOM_SERVER_EXCLUDES: |
    /build/
    /config/
    /src/**/*.js
    /themes/example/
    /vendor-bin/
    /.devcontainer/
    /.github/
    /.idea/
    /.tx/
    /3rdparty/
    /build/
    /contribute/
    /.*
    !/.gitignore
    !/.nextcloudignore
    /composer.*
    package.json
    package-lock.json
    webpack.*
    
  CUSTOM_TEST_EXCLUDES: |
    **/tests/
    **/cypress/
    /cypress*.ts
    /jest.config.ts

jobs:
  build-custom:
    runs-on: ubuntu-latest
    env:
      BUILD_USER:    ${{ github.actor }}
      BUILD_EMAIL:   ${{ github.actor }}@users.noreply.github.com
      BUILD_TOKEN:   ${{ secrets.BUILD_TOKEN || secrets.GITHUB_TOKEN }}
    steps:
      - name: Check ambigouity
        id: release_not_exist
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.BUILD_TOKEN }}
          script: |
            // Test whether release is readable
            try {
              const releaseTag = "${{ inputs.tag }}";
              const { data: release } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                tag:   releaseTag
              });
              core.setFailed(`Release tags/${releaseTag} already exists!`);
            } catch (error) {
              // expect release to be not found
            }

      - name: Fetch custom assembly
        id:   checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          ref: ${{ inputs.assembly }}
          fetch-depth: 0
          token: ${{ secrets.BUILD_TOKEN }}

      ###
      # To keep src as close as possible to Nextcloud checked in
      # artefacts (and reduce size of patch diffs), the default
      # release pack is created early
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ inputs.tag }}
          release_name: MagentaCLOUD release ${{ inputs.tag }}
          draft: false
          prerelease: ${{ inputs.prerelease || false }}

      - name: Protect against push
        id: push_protect
        run: |
          # set user in case commits are needed
          git config user.name $BUILD_USER
          git config user.email $BUILD_EMAIL
          # but dead-end origin to avoid unintended push
          # git remote set-url origin http://no.such.host

      # the node.js, npm install procedure is taken over from upstream Nextcloud
      # command-compile.yml
      - name: Install NC compatible node.js,npm
        uses: skjnldsv/read-package-engines-version-actions@v2.2
        id: package-engines-versions
        with:
          fallbackNode: '^16'
          fallbackNpm: '^7'

      - name: Set up node ${{ steps.package-engines-versions.outputs.nodeVersion }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ steps.package-engines-versions.outputs.nodeVersion }}
          cache: npm

      - name: Set up npm ${{ steps.package-engines-versions.outputs.npmVersion }}
        run: npm i -g npm@"${{ steps.package-engines-versions.outputs.npmVersion }}"

      - name: Install dependencies, build webpacks
        run: |
          npm ci
          npm run build --if-present
  
      # TODO: check whether we have to generate css from scss for server at all
      # TODO: check whether we have to generate icons (default.css) from scss for server at all
      # (could be only required for theme build)

      # either default ignores or listed in .nextcloudignore
      - name: Clean files
        env:
          CUSTOM_EXCLUDES: |
            ${{ env.CUSTOM_SERVER_EXCLUDES }}
            ${{ env.CUSTOM_TEST_EXCLUDES }}
        run: |
          echo -e $CUSTOM_EXCLUDES > ${RUNNER_TEMP}/.distignore
          cat ${RUNNER_TEMP}/.distignore
          git ls-files --ignored --exclude-per-directory=${RUNNER_TEMP}/.distignore --cached | xargs -t rm -rf

      - name: Diff cleaned version
        run: |
          # tremporarily add dirty changes
          git add -A
          git commit -m "Temp add"
          git diff --patch --diff-filter=d ${{ inputs.stable }}..HEAD -- > ${RUNNER_TEMP}/custom-server.patch
          gzip -9 ${RUNNER_TEMP}/custom-server.patch
          # remove dirty changes again
          git reset HEAD~ 

      - name: Upload server custom parts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ env.BUILD_TOKEN }}            
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ runner.temp }}/custom-server.patch.gz
          asset_name: Custom Server patch (tar.gz)
          asset_content_type: application/gzip

      - name: Post-failure cleanup
        id: release_cleanup
        if: ${{ !success() && steps.create_release.outcome == 'success' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.BUILD_TOKEN }}
          script: |
            const releaseTag = "${{ inputs.tag }}";

            // Get the release by tag
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              tag:   releaseTag
            });

            // Delete the release
            try {
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                release_id: release.id
              });
            } catch (error) {
              // ignore on cleanup
            }

            // Delete the associated tag
            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                ref: `tags/${releaseTag}`
              });
            } catch (error) {
              // ignore on cleanup
            }
  